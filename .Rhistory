nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
#Prepare clinical covariates and  ensemble covariates
X <- X %>% mutate(g.noncimp_or_idh1_wt = (g.cimp_methylationnongcimp | idh1_statuswt)) %>% dplyr::select(age, g_noncimp_wt = g.noncimp_or_idh1_wt, mgmt_meth = mgmt_statusmethylated)
nzv <- caret::nearZeroVar(X, saveMetrics= TRUE)
nzv[nzv$nzv,]
################################################################
## Create data partition K folds for Cross Validation
K = 10
folds <- caret::createFolds(glio_clin_dat$os_status,
k = 10,
list = TRUE)
str(folds)
data <- glio_clin_dat %>%
dplyr::select(os_status, os_months, sample_id) %>%
cbind(X)
split_up <- lapply(folds, function(ind, dat) dat[ind,], dat = data)
unlist(lapply(split_up, nrow))
i=1
train_data <- do.call(rbind, split_up[c(-i)])
test_data <- do.call(rbind, split_up[[i]])
##Run Stan
stan_file <- "Weibull.stan"
#Function gen_stan_data and gen_init from Weibull_clinical.R
nChain <- 2
gen_inits <- function(M) {
function()
list(
alpha_raw = 0.01*rnorm(1),
mu = rnorm(1),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = array(abs(rnorm(M)), dim = c(M)),
beta_bg_raw = array(rnorm(M), dim = c(M))
)
}
gen_stan_data <- function(data, formula = as.formula(~ 1)) {
if (!inherits(formula, 'formula'))
formula <- as.formula(formula)
observed_data <- data %>%
dplyr::filter(os_status == 'DECEASED')
censored_data <- data %>%
dplyr::filter(os_status != 'DECEASED')
Xobs_bg <- observed_data %>%
model.matrix(formula, data = .)
Xcen_bg <- censored_data %>%
model.matrix(formula, data = . )
assertthat::assert_that(ncol(Xcen_bg) == ncol(Xobs_bg))
M <- ncol(Xcen_bg)
if (M > 1) {
if ("(Intercept)" %in% colnames(Xobs_bg))
Xobs_bg <- array(Xobs_bg[,-1], dim = c(nrow(observed_data), M - 1))
if ("(Intercept)" %in% colnames(Xcen_bg))
Xcen_bg <- array(Xcen_bg[,-1], dim = c(nrow(censored_data), M - 1))
assertthat::assert_that(ncol(Xcen_bg) == ncol(Xobs_bg))
M <- ncol(Xcen_bg)
}
stan_data <- list(
Nobs = nrow(observed_data),
Ncen = nrow(censored_data),
yobs = observed_data$os_months,
ycen = censored_data$os_months,
M_bg = M,
Xcen_bg = array(Xcen_bg, dim = c(nrow(censored_data), M)),
Xobs_bg = array(Xobs_bg, dim = c(nrow(observed_data), M))
)
}
head(train_data)
#Function gen_stan_data and gen_init from Weibull_clinical.R
nChain <- 2
wei_fullfit <- rstan::stan(stan_file,
data = gen_stan_data(train_data, '~age+
g_noncimp_wt+
mgmt_meth'),
#control = list(adapt_delta = 0.99,
#              max_treedepth = 10),
cores = min(nChain, parallel::detectCores()),
seed = 7327,
chains = nChain,
iter = 1000,
init = gen_inits(M = 3)
)
pp_alpha <- rstan::extract(wei_fullfit,'alpha')$alpha
pp_mu <- rstan::extract(wei_fullfit,'mu')$mu
pp_beta <- rstan::extract(wei_fullfit, 'beta_bg')$beta_bg
pp_beta <-  split(pp_beta, seq(nrow(pp_beta)))
pp_alpha <-  split(pp_alpha, seq(nrow(pp_alpha)))
pp_mu <-  split(pp_mu, seq(nrow(pp_mu)))
X_test <- test_data %>%
select(age, g_noncimp_wt, mgmt_meth)
pred_newdata <-
purrr::pmap(list(pp_beta, pp_alpha, pp_mu),
function(pp_beta, pp_alpha, pp_mu)
{weibull_sim_data(alpha = pp_alpha,
mu = pp_mu,
n = n_distinct(test_data$sample_id),
beta = pp_beta,
X = X_test)} )
weibull_sim_data <- function(alpha, mu, n, beta, X) {
beta <- as.vector(as.numeric(beta))
X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))
#prognostic index
hazard_ratio = X %*% beta
t = lapply(hazard_ratio, function(x)
rweibull(n = 1, shape = alpha, scale = exp(-(mu + hazard_ratio)/alpha)))
t = do.call(rbind, t)
data <- data.frame(surv_months = t,
censor_months = rexp(n = n, rate = 1/100),
stringsAsFactors = F
) %>%
dplyr::mutate(os_status = ifelse(surv_months < censor_months,
'DECEASED', 'LIVING'
),
os_months = ifelse(surv_months < censor_months,
surv_months, censor_months
)
)
return(data)
}
pp_alpha <- rstan::extract(wei_fullfit,'alpha')$alpha
pp_mu <- rstan::extract(wei_fullfit,'mu')$mu
pp_beta <- rstan::extract(wei_fullfit, 'beta_bg')$beta_bg
pp_beta <-  split(pp_beta, seq(nrow(pp_beta)))
pp_alpha <-  split(pp_alpha, seq(nrow(pp_alpha)))
pp_mu <-  split(pp_mu, seq(nrow(pp_mu)))
X_test <- test_data %>%
select(age, g_noncimp_wt, mgmt_meth)
pred_newdata <-
purrr::pmap(list(pp_beta, pp_alpha, pp_mu),
function(pp_beta, pp_alpha, pp_mu)
{weibull_sim_data(alpha = pp_alpha,
mu = pp_mu,
n = n_distinct(test_data$sample_id),
beta = pp_beta,
X = X_test)} )
X_test <- test_data %>%
select(age, g_noncimp_wt, mgmt_meth)
head(test_data)
test_data <- split_up[[i]] %>% unlist()
head(test_data)
test_data <- tbl_df(split_up[[i]] %>% unlist())
head(test_data)
test_data <- tbl_df(split_up[[i]])
head(test_data)
pp_alpha <- rstan::extract(wei_fullfit,'alpha')$alpha
pp_mu <- rstan::extract(wei_fullfit,'mu')$mu
pp_beta <- rstan::extract(wei_fullfit, 'beta_bg')$beta_bg
pp_beta <-  split(pp_beta, seq(nrow(pp_beta)))
pp_alpha <-  split(pp_alpha, seq(nrow(pp_alpha)))
pp_mu <-  split(pp_mu, seq(nrow(pp_mu)))
X_test <- test_data %>%
select(age, g_noncimp_wt, mgmt_meth)
pred_newdata <-
purrr::pmap(list(pp_beta, pp_alpha, pp_mu),
function(pp_beta, pp_alpha, pp_mu)
{weibull_sim_data(alpha = pp_alpha,
mu = pp_mu,
n = n_distinct(test_data$sample_id),
beta = pp_beta,
X = X_test)} )
X_test <- test_data %>%
select(age, g_noncimp_wt, mgmt_meth)
X_test <- test_data %>%
dplyr::select(age, g_noncimp_wt, mgmt_meth)
pred_newdata <-
purrr::pmap(list(pp_beta, pp_alpha, pp_mu),
function(pp_beta, pp_alpha, pp_mu)
{weibull_sim_data(alpha = pp_alpha,
mu = pp_mu,
n = n_distinct(test_data$sample_id),
beta = pp_beta,
X = X_test)} )
class(X_test)
X_test <- test_data %>%
dplyr::select(age, g_noncimp_wt, mgmt_meth) %>%
as.matrix()
pred_newdata <-
purrr::pmap(list(pp_beta, pp_alpha, pp_mu),
function(pp_beta, pp_alpha, pp_mu)
{weibull_sim_data(alpha = pp_alpha,
mu = pp_mu,
n = n_distinct(test_data$sample_id),
beta = pp_beta,
X = X_test)} )
pred_survdata <-
pp_newdata %>%
map(~ mutate(., os_deceased = os_status == 'DECEASED')) %>%
map(~ survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%
map(fortify)
pred_survdata <-
pred_newdata %>%
map(~ mutate(., os_deceased = os_status == 'DECEASED')) %>%
map(~ survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%
map(fortify)
pred_mod <- lapply(pp_newdata %>%
map(~ mutate(.,
os_deceased = os_status == 'DECEASED')),
function(x){
with(x, Surv(os_months, os_deceased))
})
pred_mod <- lapply(pred_newdata %>%
map(~ mutate(.,
os_deceased = os_status == 'DECEASED')),
function(x){
with(x, Surv(os_months, os_deceased))
})
pp_KM <- lapply(pred_mod, function(x){
survival::survfit(x ~ 1)
})
# integrated Brier score up to max(DLBCL$time)
pp_brier <- purrr::map2(.x = pred_mod,
.y = pp_KM,
.f = ~ipred::sbrier(obj = .x,
pred = .y))
ggplot2::ggplot(data.frame(ibs = pp_brier %>% unlist , model = "weibull clinical")) +
geom_boxplot(aes(model, ibs)) + ylim(c(0,0.5))
smod <- with(test_data %>%
os_deceased = os_status == 'DECEASED',
(Surv(os_months, os_deceased))
pred_mod <- lapply(pred_newdata %>%
map(~ mutate(.,
os_deceased = os_status == 'DECEASED')),
function(x){
with(x, Surv(os_months, os_deceased))
})
pp_KM <- lapply(pred_mod, function(x){
survival::survfit(x ~ 1)
})
# integrated Brier score up to max(DLBCL$time)
pp_brier <- purrr::map2(.x = pred_mod,
.y = pp_KM,
.f = ~ipred::sbrier(obj = .x,
pred = .y))
smod <- with(test_data %>%
os_deceased = os_status == 'DECEASED',
(Surv(os_months, os_deceased)))
smod <- with(test_data %>%
os_deceased = os_status == 'DECEASED',
Surv(os_months, os_deceased))
smod <- with(test_data %>% dplyr::mutate(
os_deceased = os_status == 'DECEASED'),
Surv(os_months, os_deceased))
pred_mod <- lapply(pred_newdata %>%
map(~ mutate(.,
os_deceased = os_status == 'DECEASED')),
function(x){
with(x, Surv(os_months, os_deceased))
})
pp_KM <- lapply(pred_mod, function(x){
survival::survfit(x ~ 1)
})
?map
# integrated Brier score up to max(DLBCL$time)
pp_brier <- purrr::map(.x = pp_KM,
.f = ~ipred::sbrier(obj = smod,
pred = .x))
ggplot2::ggplot(data.frame(ibs = pp_brier %>% unlist , model = "weibull clinical")) +
geom_boxplot(aes(model, ibs)) + ylim(c(0,0.5))
ibs[[i]] <- pp_brier
ibs <- NULL
ibs[[i]] <- pp_brier
pp_KM <- lapply(pred_newdata %>%
map(~ mutate(.,
os_deceased = os_status == 'DECEASED')),
function(x){
survfit(Surv(os_months, os_deceased) ~ 1, data = x)
})
predKM <- pp_KM
# integrated Brier score up to max(DLBCL$time)
pp_brier <- purrr::map(.x = pred_KM,
.f = ~ipred::sbrier(obj = smod,
pred = .x))
predKM <- pp_KM
pred_KM <- pp_KM
# integrated Brier score up to max(DLBCL$time)
pp_brier <- purrr::map(.x = pred_KM,
.f = ~ipred::sbrier(obj = smod,
pred = .x))
ggplot2::ggplot(data.frame(ibs = pp_brier %>% unlist , model = "weibull clinical")) +
geom_boxplot(aes(model, ibs)) + ylim(c(0,0.5))
save(weibull_sim_data, gen_stan_data, gen_inits , "WeibullFun.Rdata")
save(weibull_sim_data, gen_stan_data, gen_inits , file = "WeibullFun.Rdata")
library(Hmisc)
set.seed(16)
dat <- SimSurv(30,cens=FALSE)
install.packages("Hmisc")
Cindex <- purrr::map(.x = pred_KM,
.f = ~pec::cindex(obj = .x,
formula = smod~1,
data = test_data))
install.packages("pec")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("sjmgarnier/viridis")
install.packages("pec")
library(rstan)
library(purrr)
library(httr)
library(readr)
library(survival)
library(rstan)
library(spBayesSurv)
library(pracma)
library(assertthat)
library(cgdsr)
suppressMessages(library(dplyr))
library(ggplot2)
require(ggfortify)
theme_set(theme_bw())
library(VIM)
library(scales)
###############################################
#Data obtantion
#get data from with MSKCC package
mycgds = CGDS("http://www.cbioportal.org/public-portal/")
glioblastome_2013_id_sutdy = getCancerStudies(mycgds)[55,1]
glioblastome_2013_case_list = getCaseLists(mycgds, glioblastome_2013_id_sutdy)[2,1]
glioblastome_2013_clinical_data <-  getClinicalData(mycgds, glioblastome_2013_case_list)
glioblastome_2008_id_sutdy = getCancerStudies(mycgds)[56,1]
glioblastome_2008_case_list = getCaseLists(mycgds, glioblastome_2008_id_sutdy)[2,1]
glioblastome_2008_clinical_data <-  getClinicalData(mycgds, glioblastome_2008_case_list)
#inspect dataframes
glimpse(glioblastome_2013_clinical_data)
glimpse(glioblastome_2008_clinical_data)
# glioblastome_2013_clinical_data <- glioblastome_2013_clinical_data %>% tibble::rownames_to_column("sample_id"); glioblastome_2008_clinical_data <- glioblastome_2008_clinical_data %>% tibble::rownames_to_column("sample_id")
#
# glio_clin_dat <- glioblastome_2013_clinical_data %>%
#   filter(!(sample_id %in%  glioblastome_2008_clinical_data$sample_id ))
glio_clin_dat <- tbl_df(glioblastome_2013_clinical_data %>% tibble::rownames_to_column("sample_id"))
####################################################################
#Data Cleaning
#convert to lower case
names(glio_clin_dat) <- tolower(names(glio_clin_dat))
#convert missig values
convert_blank_to_na <- function(x) {
if(!purrr::is_character(x)){
warning('input variate not character - return original')
return(x)
} else {
ifelse(x == '', NA, x)
}
}
glio_clin_dat <- glio_clin_dat %>%
dplyr::mutate_all(funs(convert_blank_to_na))
#inspect resulting dataframe
glimpse(glio_clin_dat)
######################################################################
#Data Exploration
#Considering overall survival#
glio_clin_dat %>%
VIM::aggr(prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
#filter unknown or negative survival times (os_monts < 0)
glio_clin_dat %>%
filter(is.na(os_status) | os_status != '') %>%
filter(os_months <= 0 | is.na(os_months)) %>%
select(os_status, os_months) %>%
dplyr::glimpse()
#for now this observation will be remove from the analysis
glio_short_dat <- glio_clin_dat %>%
filter(!is.na(os_status) & os_status != '') %>%
filter(os_months > 0 & !is.na(os_months))
#Check 44 fewer obsrvations than original if working with dfs
assertthat::assert_that(nrow(glio_short_dat) == nrow(glio_clin_dat) - 44)
glio_clin_dat <- glio_short_dat
glio_clin_dat %>%
VIM::aggr(prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)
########## Distribution of event times  ######################
glio_clin_dat %>%
ggplot(aes(x = os_months,
group = os_status,
colour = os_status,
fill = os_status)) +
geom_density(alpha = 0.5)
#KM curve
mle.surv <- survfit(Surv(os_months, os_deceased) ~ 1,
data = glio_clin_dat %>%
mutate(os_deceased = (os_status == "DECEASED")))
ggplot2::autoplot(mle.surv, conf.int = F) +
ggtitle('KM survival for GGM 2013 Cohort')
############ Parametric Survival Model #####################
gen_stan_data <- function(data, formula = as.formula(~ 1)) {
if (!inherits(formula, 'formula'))
formula <- as.formula(formula)
observed_data <- data %>%
dplyr::filter(os_status == 'DECEASED')
censored_data <- data %>%
dplyr::filter(os_status != 'DECEASED')
Xobs_bg <- observed_data %>%
model.matrix(formula, data = .)
Xcen_bg <- censored_data %>%
model.matrix(formula, data = . )
assertthat::assert_that(ncol(Xcen_bg) == ncol(Xobs_bg))
M <- ncol(Xcen_bg)
if (M > 1) {
if ("(Intercept)" %in% colnames(Xobs_bg))
Xobs_bg <- array(Xobs_bg[,-1], dim = c(nrow(observed_data), M - 1))
if ("(Intercept)" %in% colnames(Xcen_bg))
Xcen_bg <- array(Xcen_bg[,-1], dim = c(nrow(censored_data), M - 1))
assertthat::assert_that(ncol(Xcen_bg) == ncol(Xobs_bg))
M <- ncol(Xcen_bg)
}
stan_data <- list(
Nobs = nrow(observed_data),
Ncen = nrow(censored_data),
yobs = observed_data$os_months,
ycen = censored_data$os_months,
M_bg = M,
Xcen_bg = array(Xcen_bg, dim = c(nrow(censored_data), M)),
Xobs_bg = array(Xobs_bg, dim = c(nrow(observed_data), M))
)
}
##update initial values
load("historic_cohort.Rdata")
gen_inits <- function(M) {
function()
list(
alpha_raw = 0.01*rnorm(1),
mu = rnorm(1),
tau_s_bg_raw = 0.1*abs(rnorm(1)),
tau_bg_raw = array(abs(rnorm(M)), dim = c(M)),
beta_bg_raw = array(rnorm(M), dim = c(M))
)
}
##Prepare for fit Clinical Model
M <- cor(train[sapply(train, function(x) !is.character(x))])
#corrplot(M, method = "ellipse",order = "hclust")
##Updated
corrM <-   tbl_df(model.matrix(~x2012_methylation_class +
expression_subtype + g.cimp_methylation +
idh1_status +
mgmt_status, data = glio_clin_dat))
corrM %>%
mutate_all(funs(as.integer)) %>%
sjPlot::sjp.corr(sort.corr = T, show.legend = T)
## impute idh1_status based on g.cimp
table(glio_clin_dat$g.cimp_methylation, glio_clin_dat$idh1_status, useNA = "always")
glio_clin_dat$idh1_status[is.na(glio_clin_dat$idh1_status) & glio_clin_dat$g.cimp_methylation == "G-CIMP"] <- "R132C"
glio_clin_dat$idh1_status[is.na(glio_clin_dat$idh1_status) & glio_clin_dat$g.cimp_methylation == "non-G-CIMP"] <- "WT"
table(glio_clin_dat$g.cimp_methylation, glio_clin_dat$idh1_status,
glio_clin_dat$mgmt_status, useNA = "always" )
#Prepare clinical covariates, just for now we will drop the remaining missing values
glio_clin_dat <- glio_clin_dat %>%
filter(!is.na( mgmt_status)) %>%
mutate(age_centered = scale(age),  #scaling age because is a continuos covariate
g.cimp_or_idh1_r = (I(g.cimp_methylation == "G-CIMP") | I(idh1_status != "WT")))
##Run Stan
stan_file <- "Weibull.stan"
#open stan file
if (interactive())
file.edit(stanfile)
file.edit(stan_file)
testfit <- rstan::stan(stan_file,
data = gen_stan_data(glio_clin_dat, '~ age_centered +
g.cimp_or_idh1_r +
I( mgmt_status=="METHYLATED") '),
init = gen_inits(M = 3),
iter = 4,
chains = 1
)
install.packages("pec")
install.packages("pec", dependencies = TRUE)
library(pec)
Cindex <- purrr::map(.x = pred_KM,
.f = ~pec::cindex(obj = .x,
formula = smod~1,
data = test_data))
Cindex <- purrr::map(.x = pred_KM,
.f = ~pec::cindex(obj = .x,
formula = smod~1))
smod
smod~1
smod~age
with(test_data %>% dplyr::mutate(
os_deceased = os_status == 'DECEASED'),
Surv(os_months, os_deceased) ~ age)
#----Load libraries---#
library(purrr)
library(httr)
library(readr)
library(survival)
library(rstan)
library(spBayesSurv)
library(pracma)
library(assertthat)
library(cgdsr)
suppressMessages(library(dplyr))
library(ggplot2)
require(ggfortify)
theme_set(theme_bw())
library(VIM)
library(scales)
library(caret)
library(ipred)
library(e1071)
library(MASS)
library(lattice)
library(impute)
library(qdap)
library(doMC)
registerDoMC(cores = 5)
with(test_data %>% dplyr::mutate(
os_deceased = os_status == 'DECEASED'),
Surv(os_months, os_deceased) ~ age)
with(test_data %>% dplyr::mutate(
os_deceased = os_status == 'DECEASED'),
Surv(os_months, os_deceased))
library(prodlim)
set.seed(13)
dat <- SimSurv(100)
dat
?SimSurv
?survModel
sim.lvm
library(rms)
