{
    "collab_server" : "",
    "contents" : "#----Load libraries---#\n\nlibrary(purrr)\nlibrary(httr)\nlibrary(readr)\nlibrary(survival)\nlibrary(rstan)\nlibrary(spBayesSurv)\nlibrary(pracma)\nlibrary(assertthat)\nlibrary(cgdsr)\nsuppressMessages(library(dplyr))\nlibrary(ggplot2)\nrequire(ggfortify)\ntheme_set(theme_bw())\nlibrary(VIM)\nlibrary(scales)\n###############################################\n#Data obtantion\n#get data from with MSKCC package \n\nmycgds = CGDS(\"http://www.cbioportal.org/public-portal/\")\n\nglioblastome_2013_id_sutdy = getCancerStudies(mycgds)[55,1]\nglioblastome_2013_case_list = getCaseLists(mycgds, glioblastome_2013_id_sutdy)[2,1]\nglioblastome_2013_clinical_data <-  getClinicalData(mycgds, glioblastome_2013_case_list)\n\nglioblastome_2008_id_sutdy = getCancerStudies(mycgds)[56,1]\nglioblastome_2008_case_list = getCaseLists(mycgds, glioblastome_2008_id_sutdy)[2,1]\nglioblastome_2008_clinical_data <-  getClinicalData(mycgds, glioblastome_2008_case_list)\n\n#inspect dataframes\nglimpse(glioblastome_2013_clinical_data)\nglimpse(glioblastome_2008_clinical_data)\n\nglioblastome_2013_clinical_data <- glioblastome_2013_clinical_data %>% tibble::rownames_to_column(\"sample_id\"); glioblastome_2008_clinical_data <- glioblastome_2008_clinical_data %>% tibble::rownames_to_column(\"sample_id\") \n\nhist_clin_dat <- tbl_df(glioblastome_2008_clinical_data)\n\n####################################################################\n#Data Cleaning\n\n#convert to lower case\nnames(hist_clin_dat) <- tolower(names(hist_clin_dat)) \n\n#convert missig values\nconvert_blank_to_na <- function(x) {\n  if(!purrr::is_character(x)){\n    warning('input variate not character - return original')\n    return(x)\n  } else {\n    ifelse(x == '', NA, x)\n  }\n}\nhist_clin_dat <- hist_clin_dat %>%\n  dplyr::mutate_all(funs(convert_blank_to_na))\n\n#inspect resulting dataframe\nglimpse(hist_clin_dat)\n\n######################################################################\n#Data Exploration\n#Considering overall survival#\n\nhist_clin_dat %>%\n  VIM::aggr(prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)\n\n#filter unknown or negative survival times (os_monts < 0)\n\nhist_clin_dat %>%\n  filter(is.na(os_status) | os_status != '') %>%\n  filter(os_months <= 0 | is.na(os_months)) %>%\n  select(os_status, os_months) %>%\n  dplyr::glimpse()\n\n#for now this observation will be remove from the analysis\n\nhist_clin_dat <- hist_clin_dat %>%\n  filter(!is.na(os_status) & os_status != '') %>%\n  filter(os_months > 0 & !is.na(os_months))\n\n#Check 44 fewer obsrvations than original if working with dfs\n#assertthat::assert_that(nrow(hist_clin_dat) == nrow(glioblastome_2008_clinical_data) - 44)\n\n\n########## Distribution of event times  ######################\n\nhist_clin_dat %>%\n  ggplot(aes(x = os_months,\n             group = os_status,\n             colour = os_status,\n             fill = os_status)) +\n  geom_density(alpha = 0.5)\n\n#KM curve\n\nmle.surv <- survfit(Surv(os_months, os_deceased) ~ 1,\n                    data = hist_clin_dat %>%\n                      mutate(os_deceased = (os_status == \"DECEASED\")))\nggplot2::autoplot(mle.surv, conf.int = F) +\n  ggtitle('KM survival for GGM Cohort')\n\n\n\n############ Parametric Survival Model #####################\n\nobserved_data <- hist_clin_dat %>%\n  filter(os_status == \"DECEASED\")\n\ncensored_data <- hist_clin_dat %>%\n  filter(os_status != \"DECEASED\")\n\nstan_data <- list(\n  Nobs = nrow(observed_data),\n  Ncen = nrow(censored_data),\n  yobs = observed_data$os_months,\n  yceb = censored_data$os_months\n)\nrm(censored_data)\nrm(observed_data)\n\nstr(stan_data)\n\n#Wraped in a function\n\ngen_stan_data <- function(data) {\n  observed_data <- data %>%\n    dplyr::filter(os_status == 'DECEASED')\n  \n  censored_data <- data %>%\n    dplyr::filter(os_status != 'DECEASED')\n  \n  stan_data <- list(\n    Nobs = nrow(observed_data),\n    Ncen = nrow(censored_data),\n    yobs = observed_data$os_months,\n    ycen = censored_data$os_months\n  )\n}\n\n######### Setting intial values\n\ngen_inits <- function() {\n  list(\n    alpha_raw = 0.01*rnorm(1),\n    mu = rnorm(1)\n  )\n}\n\n########################## Stan run ###########################\n\nstanfile <- \"Weibull_null.stan\"\n#open stan file\nif (interactive())\n  file.edit(stanfile)\nnChain <- 4\nweibull_null_model <-  stan(stanfile,\n                            data = gen_stan_data(hist_clin_dat),\n                            cores = min(nChain, parallel::detectCores()),\n                            seed = 7327,\n                            chains = nChain,\n                            iter = 2000,\n                            init = gen_inits\n)\n\n####################### Checking convergence ###################\n\nprint(weibull_null_model) #(Check Rhat close to 1)\n\nrstan::traceplot(weibull_null_model, 'lp__') #Review traceplot for log-posterior\n\nrstan::traceplot(weibull_null_model, c('alpha','mu'), ncol = 1)    #Review traceplot for parameters of interest\n\nif(interactive())\n  shinystan::launch_shinystan(weibull_null_model)        #Launch shiny stan\n\n\n\n######################### Posterior predicitive checks ###################################\n#Simulate time to event data\n#weibull_sim_data function takes two parameters (alpha and mu) as inputs and a desired sample size (n). \n\n\nweibull_sim_data <- function(alpha, mu, n) {\n  \n  data <- data.frame(surv_months = rweibull(n = n, alpha, exp(-(mu)/alpha)),\n                     censor_months = rexp(n = n, rate = 1/100),\n                     stringsAsFactors = F\n  ) %>%\n    dplyr::mutate(os_status = ifelse(surv_months < censor_months,\n                                     'DECEASED', 'LIVING'\n    ),\n    os_months = ifelse(surv_months < censor_months,\n                       surv_months, censor_months\n    )\n    )\n  \n  return(data)\n}\n#Censoring is \"arbitrarily\" rexp() , censoring is assumed to be noninformative.\n\n######## Simulating data for each posterior draw #\npp_alpha <- rstan::extract(weibull_null_model,'alpha')$alpha\npp_mu <- rstan::extract(weibull_null_model,'mu')$mu\n\ntest_n <- nrow(hist_clin_dat)\npp_newdata <- purrr::map2(.x = pp_alpha,\n                          .y = pp_mu,\n                          .f = ~weibull_sim_data(alpha = .x,\n                                                 mu = .y,\n                                                 n = test_n))\n\n###### Plot time to event in the posterior draws compare to actual time in dataset\nggplot(pp_newdata %>%\n         bind_rows() %>%\n         mutate(type = 'posterior predicted values') %>%\n         bind_rows(hist_clin_dat %>% mutate(type = 'actual data'))\n       , aes(x = os_months, group = os_status, colour = os_status, fill = os_status))+ \n  geom_density(alpha = 0.5) +\n  facet_wrap(~type, ncol = 1)\n\n#### summarise posterior predictive draws\n\n## cumulative survival rate at each draw from the posterior\n\npp_survdata <- \n  pp_newdata %>%\n  map(~ mutate(., os_deceased = os_status == 'DECEASED')) %>%\n  map(~ survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%\n  map(fortify)\n\n## summarise cum survival for each unit time (month), summarised at 95% confidence interval\npp_survdata_agg <- \n  pp_survdata %>%\n  map(~mutate(., time_group = floor(time))) %>%\n  bind_rows() %>%\n  group_by(time_group) %>%\n  summarize(surv_mean = mean(surv),\n            surv_p50 = median(surv),\n            surv_lower = quantile(surv, probs = 0.025),\n            surv_upper = quantile(surv, probs = 0.975)) %>%\n  ungroup()\n\n## km\nkmcurve_data <-   fortify(\n  survfit(\n    Surv(os_months, os_deceased) ~ 1,\n    data = hist_clin_dat %>%\n      mutate(os_deceased = os_status == 'DECEASED')\n  )) %>%\n  mutate(lower =  surv,\n         upper = surv)\n\nggplot(pp_survdata_agg %>%\n         mutate(type = 'posterior predicted values') %>%\n         rename(surv = surv_p50, lower = surv_lower, upper = surv_upper, time = time_group)\n       %>%\n         bind_rows(kmcurve_data %>% mutate(type = 'actual data')),\n       aes(x = time, group = type, linetype = type)) +\n  geom_line(aes(y = surv, colour = type)) + \n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +\n  xlim(c(0, 200))+\n  ggtitle(\"Glioblastome 2008 historical cohort\")\n\n\n############# Save as a function  ######################\n\npp_predict_surv <- function(pp_alpha, pp_mu, n,\n                            level = 0.9,\n                            plot = F, data = NULL,\n                            sim_data_fun = weibull_sim_data\n) {\n  pp_newdata <- \n    purrr::map2(.x = pp_alpha,\n                .y = pp_mu,\n                .f = ~ sim_data_fun(alpha = .x, mu = .y, n = n)\n    )\n  \n  pp_survdata <-\n    pp_newdata %>%\n    purrr::map(~ dplyr::mutate(., os_deceased = os_status == 'DECEASED')) %>%\n    purrr::map(~ survival::survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%\n    purrr::map(fortify)\n  \n  ## compute quantiles given level \n  lower_p <- 0 + ((1 - level)/2)\n  upper_p <- 1 - ((1 - level)/2)\n  \n  pp_survdata_agg <- \n    pp_survdata %>%\n    purrr::map(~ dplyr::mutate(.,\n                               time_group = floor(time))) %>%\n    dplyr::bind_rows() %>%\n    dplyr::group_by(time_group) %>%\n    dplyr::summarize(surv_mean = mean(surv)\n                     , surv_p50 = median(surv)\n                     , surv_lower = quantile(surv,\n                                             probs = lower_p)\n                     , surv_upper = quantile(surv,\n                                             probs = upper_p)\n    ) %>%\n    dplyr::ungroup()\n  \n  if (plot == FALSE) {\n    return(pp_survdata_agg)\n  } \n  \n  ggplot_data <- pp_survdata_agg %>%\n    dplyr::mutate(type = 'posterior predicted values') %>%\n    dplyr::rename(surv = surv_p50,\n                  lower = surv_lower,\n                  upper = surv_upper, time = time_group)\n  \n  if (!is.null(data)){\n    ggplot_data <- \n      ggplot_data %>% \n      bind_rows(\n        fortify(\n          survival::survfit(\n            Surv(os_months, os_deceased) ~ 1, \n            data = data %>% \n              dplyr::mutate(\n                os_deceased = os_status == 'DECEASED')\n          )) %>%\n          dplyr::mutate(lower = surv,\n                        upper = surv, type = 'actual data')\n      )}\n  \n  pl <- ggplot(ggplot_data,\n               aes(x = time, group = type, linetype = type)) + \n    geom_line(aes(y = surv, colour = type)) +\n    geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2)\n  \n  pl \n}\n\n\n################# Posterior predictive check ###################\npl <- pp_predict_surv(pp_alpha = extract(weibull_null_model,'alpha')$alpha,\n                      pp_mu = extract(weibull_null_model,'mu')$mu,\n                      n = nrow(hist_clin_dat),\n                      data = hist_clin_dat,\n                      plot = T\n) \npl + \n  xlim(NA, 250) +\n  ggtitle('Posterior predictive checks for NULL weibull model\\nfit to GBC 2008 historical cohort; showing 90% CI')\n\n# Proportion of times is the observed event rate within the 90 % Confidence Interval\n\n## summarize 90% CI of predicted event rate for each interval\npp_agg <- pp_predict_surv(pp_alpha = extract(weibull_null_model,'alpha')$alpha,\n                          pp_mu = extract(weibull_null_model,'mu')$mu,\n                          n = nrow(hist_clin_dat)\n)\n\n\n## summarize observed data into same time_groups\nact_agg <- \n  survival::survfit(Surv(os_months, I(os_status == 'DECEASED')) ~ 1,\n                    data = hist_clin_dat\n  ) %>%\n  fortify() %>%\n  dplyr::mutate(time_group = floor(time)) %>%\n  dplyr::group_by(time_group) %>%\n  dplyr::summarise(observed_surv = mean(surv)) %>%\n  dplyr::ungroup()\n\n## compute proportion of observed values within 90% ci\nact_agg %>%\n  dplyr::inner_join(pp_agg, by = 'time_group') %>%\n  dplyr::mutate(within_interval = ifelse(observed_surv >= surv_lower & observed_surv <= surv_upper,\n                                         1, 0),\n                time_set = cut(time_group, breaks = c(0,100))\n  ) %>%\n  dplyr::group_by(time_set) %>%\n  dplyr::summarize(mean(within_interval))",
    "created" : 1518705615772.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1191977840",
    "id" : "46B47F0A",
    "lastKnownWriteTime" : 1518708000,
    "last_content_update" : 1518708000504,
    "path" : "C:/RFactory/Code_BYM_Warwick/Weibull_Power_Prior.R",
    "project_path" : "Weibull_Power_Prior.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}