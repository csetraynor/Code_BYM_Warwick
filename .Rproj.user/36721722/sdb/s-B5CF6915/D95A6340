{
    "collab_server" : "",
    "contents" : "#----Load libraries---#\n\nlibrary(purrr)\nlibrary(httr)\nlibrary(readr)\nlibrary(survival)\nlibrary(rstan)\nlibrary(spBayesSurv)\nlibrary(pracma)\nlibrary(assertthat)\nlibrary(cgdsr)\nsuppressMessages(library(dplyr))\nlibrary(ggplot2)\nrequire(ggfortify)\ntheme_set(theme_bw())\nlibrary(VIM)\nlibrary(scales)\n###############################################\n#Data obtantion\n#get data from with MSKCC package \n\nmycgds = CGDS(\"http://www.cbioportal.org/public-portal/\")\n\nglioblastome_2013_id_sutdy = getCancerStudies(mycgds)[55,1]\nglioblastome_2013_case_list = getCaseLists(mycgds, glioblastome_2013_id_sutdy)[2,1]\nglioblastome_2013_clinical_data <-  getClinicalData(mycgds, glioblastome_2013_case_list)\n\nglioblastome_2008_id_sutdy = getCancerStudies(mycgds)[56,1]\nglioblastome_2008_case_list = getCaseLists(mycgds, glioblastome_2008_id_sutdy)[2,1]\nglioblastome_2008_clinical_data <-  getClinicalData(mycgds, glioblastome_2008_case_list)\n\n#inspect dataframes\nglimpse(glioblastome_2013_clinical_data)\nglimpse(glioblastome_2008_clinical_data)\n\n# glioblastome_2013_clinical_data <- glioblastome_2013_clinical_data %>% tibble::rownames_to_column(\"sample_id\"); glioblastome_2008_clinical_data <- glioblastome_2008_clinical_data %>% tibble::rownames_to_column(\"sample_id\") \n# \n# glio_clin_dat <- glioblastome_2013_clinical_data %>%\n#   filter(!(sample_id %in%  glioblastome_2008_clinical_data$sample_id ))\n\n\nglio_clin_dat <- tbl_df(glioblastome_2013_clinical_data %>% tibble::rownames_to_column(\"sample_id\")) \n####################################################################\n#Data Cleaning\n\n#convert to lower case\nnames(glio_clin_dat) <- tolower(names(glio_clin_dat)) \n\n#convert missig values\nconvert_blank_to_na <- function(x) {\n  if(!purrr::is_character(x)){\n    warning('input variate not character - return original')\n    return(x)\n  } else {\n    ifelse(x == '', NA, x)\n  }\n}\nglio_clin_dat <- glio_clin_dat %>%\n  dplyr::mutate_all(funs(convert_blank_to_na))\n\n#inspect resulting dataframe\nglimpse(glio_clin_dat)\n\n######################################################################\n#Data Exploration\n#Considering overall survival#\n\nglio_clin_dat %>%\n  VIM::aggr(prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)\n\n#filter unknown or negative survival times (os_monts < 0)\n\nglio_clin_dat %>%\n  filter(is.na(os_status) | os_status != '') %>%\n  filter(os_months <= 0 | is.na(os_months)) %>%\n  select(os_status, os_months) %>%\n  dplyr::glimpse()\n\n#for now this observation will be remove from the analysis\n\nglio_short_dat <- glio_clin_dat %>%\n  filter(!is.na(os_status) & os_status != '') %>%\n  filter(os_months > 0 & !is.na(os_months))\n\n#Check 44 fewer obsrvations than original if working with dfs\nassertthat::assert_that(nrow(glio_short_dat) == nrow(glio_clin_dat) - 44)\nglio_clin_dat <- glio_short_dat\n\nglio_clin_dat %>%\n  VIM::aggr(prop = FALSE, combined = TRUE, numbers = TRUE, sortVars = TRUE, sortCombs = TRUE)\n\n########## Distribution of event times  ######################\n\nglio_clin_dat %>%\n  ggplot(aes(x = os_months,\n             group = os_status,\n             colour = os_status,\n             fill = os_status)) +\n  geom_density(alpha = 0.5)\n\n#KM curve\n\nmle.surv <- survfit(Surv(os_months, os_deceased) ~ 1,\n                    data = glio_clin_dat %>%\n                      mutate(os_deceased = (os_status == \"DECEASED\")))\nggplot2::autoplot(mle.surv, conf.int = F) +\n  ggtitle('KM survival for GGM 2013 Cohort')\n\n\n\n############ Parametric Survival Model #####################\n\ngen_stan_data <- function(data, formula = as.formula(~ 1)) {\n  \n  if (!inherits(formula, 'formula'))\n    formula <- as.formula(formula)\n  \n  observed_data <- data %>%\n    dplyr::filter(os_status == 'DECEASED')\n  \n  censored_data <- data %>%\n    dplyr::filter(os_status != 'DECEASED')\n  \n  Xobs_bg <- observed_data %>%\n    model.matrix(formula, data = .)\n  \n  Xcen_bg <- censored_data %>% \n    model.matrix(formula, data = . )\n  \n  assertthat::assert_that(ncol(Xcen_bg) == ncol(Xobs_bg))\n  M <- ncol(Xcen_bg)\n  \n  if (M > 1) {\n    if (\"(Intercept)\" %in% colnames(Xobs_bg))\n      Xobs_bg <- array(Xobs_bg[,-1], dim = c(nrow(observed_data), M - 1))\n    if (\"(Intercept)\" %in% colnames(Xcen_bg))\n      Xcen_bg <- array(Xcen_bg[,-1], dim = c(nrow(censored_data), M - 1))\n    assertthat::assert_that(ncol(Xcen_bg) == ncol(Xobs_bg))\n    M <- ncol(Xcen_bg)\n  }\n  \n  stan_data <- list(\n    Nobs = nrow(observed_data),\n    Ncen = nrow(censored_data),\n    yobs = observed_data$os_months,\n    ycen = censored_data$os_months,\n    M_bg = M,\n    Xcen_bg = array(Xcen_bg, dim = c(nrow(censored_data), M)),\n    Xobs_bg = array(Xobs_bg, dim = c(nrow(observed_data), M))\n  )\n}\n\n\n##update initial values\nload(\"historic_cohort.Rdata\")\ngen_inits <- function(M) {\n  function()\n    list(\n      alpha_raw = 0.01*rnorm(1),\n      mu = rnorm(1),\n      tau_s_bg_raw = 0.1*abs(rnorm(1)),\n      tau_bg_raw = array(abs(rnorm(M)), dim = c(M)),\n      beta_bg_raw = array(rnorm(M), dim = c(M))\n    )\n}\n\n\n##Prepare for fit Clinical Model\n\nM <- cor(train[sapply(train, function(x) !is.character(x))])\n#corrplot(M, method = \"ellipse\",order = \"hclust\")\n##Updated\n\ncorrM <-   tbl_df(model.matrix(~x2012_methylation_class + \n                             expression_subtype + g.cimp_methylation + \n                             idh1_status +\n               mgmt_status, data = glio_clin_dat))\ncorrM %>%\n  mutate_all(funs(as.integer)) %>%\n  sjPlot::sjp.corr(sort.corr = T, show.legend = T)\n\n## impute idh1_status based on g.cimp\ntable(glio_clin_dat$g.cimp_methylation, glio_clin_dat$idh1_status, useNA = \"always\")\n\nglio_clin_dat$idh1_status[is.na(glio_clin_dat$idh1_status) & glio_clin_dat$g.cimp_methylation == \"G-CIMP\"] <- \"R132C\"\nglio_clin_dat$idh1_status[is.na(glio_clin_dat$idh1_status) & glio_clin_dat$g.cimp_methylation == \"non-G-CIMP\"] <- \"WT\"\n\ntable(glio_clin_dat$g.cimp_methylation, glio_clin_dat$idh1_status,\n      glio_clin_dat$mgmt_status, useNA = \"always\" )\n\n\n#Prepare clinical covariates, just for now we will drop the remaining missing values\nglio_clin_dat <- glio_clin_dat %>%\n  filter(!is.na( mgmt_status)) %>%\n  mutate(age_centered = scale(age),  #scaling age because is a continuos covariate\n         g.cimp_or_idh1_r = (I(g.cimp_methylation == \"G-CIMP\") | I(idh1_status != \"WT\")))\n\n\n##Run Stan\nstan_file <- \"Weibull.stan\"\n#open stan file\nif (interactive())\n  file.edit(stanfile)\ntestfit <- rstan::stan(stan_file,\n                        data = gen_stan_data(glio_clin_dat, '~ age_centered + \n                                                              g.cimp_or_idh1_r + \n                                                              I( mgmt_status==\"METHYLATED\") '),\n                        init = gen_inits(M = 3),\n                        iter = 4,\n                        chains = 1\n)\nnChain <- 4\nwei_fullfit <- rstan::stan(stan_file,\n                        data = gen_stan_data(glio_clin_dat, '~ age_centered + \n                                                              g.cimp_or_idh1_r+ \n                                                              I(mgmt_status==\"METHYLATED\") '),\n                        cores = min(nChain, parallel::detectCores()),\n                        seed = 7327,\n                        chains = nChain,\n                        iter = 2000,\n                        init = gen_inits(M = 3),\n                        control = list(adapt_delta = 0.99, max_treedepth = 10)\n)\n\n\n####################### Checking convergence ###################\n\nprint(wei_fullfit) #(Check Rhat close to 1)\n\nrstan::traceplot(wei_fullfit, c('lp__', 'beta_bg'), ncol = 2) #Review traceplot for log-posterior\n\nrstan::traceplot(wei_fullfit, c('alpha','mu'), ncol = 1)    #Review traceplot for parameters of interest\n\nif(interactive())\n  shinystan::launch_shinystan(wei_fullfit)        #Launch shiny stan\n\n######################### Posterior predicitive checks ###################################\n#Simulate time to event data\n\nweibull_sim_data <- function(alpha, mu, n, beta, X) {\n  \n  beta <- as.vector(as.numeric(beta))\n  X <- array(matrix(as.numeric(X)), dim = c(n, length(beta)))\n  \n  #prognostic index\n  hazard_ratio = X %*% beta \n  \n  \n  \n  t = lapply(hazard_ratio, function(x) \n    rweibull(n = 1, shape = alpha, scale = exp(-(mu + hazard_ratio)/alpha)))\n  t = do.call(rbind, t)\n  \n  \n  data <- data.frame(surv_months = t,\n                     censor_months = rexp(n = n, rate = 1/100),\n                     stringsAsFactors = F\n  ) %>%\n    dplyr::mutate(os_status = ifelse(surv_months < censor_months,\n                                     'DECEASED', 'LIVING'\n    ),\n    os_months = ifelse(surv_months < censor_months,\n                       surv_months, censor_months\n    )\n    )\n  \n  return(data)\n}\n\ntest_alpha <- 0.8\ntest_mu <- -4\ntest_n <- 100\ntest_X = matrix(c(rnorm(100), sample(c(0,1), 100, replace = TRUE), ncol=2))\ntest_beta = c(0.5, 1)\nweibull_sim_data(alpha = test_alpha, mu = test_mu, n = test_n, beta = test_beta, X = test_X)\n\n\n\n#Censoring is \"arbitrarily\" rexp() , censoring is assumed to be noninformative.\n\n######## Simulating data for each posterior draw #\npp_alpha <- rstan::extract(wei_fullfit,'alpha')$alpha\npp_mu <- rstan::extract(wei_fullfit,'mu')$mu\npp_beta <- rstan::extract(wei_fullfit, 'beta_bg')$beta_bg\n\n\n# create list\npp_beta <-  split(pp_beta, seq(nrow(pp_beta)))\npp_alpha <-  split(pp_alpha, seq(nrow(pp_alpha)))\npp_mu <-  split(pp_mu, seq(nrow(pp_mu)))\n\nX <- model.matrix(~ age_centered + \n                 I(g.cimp_methylation==\"G-CIMP\")+ \n                 I(mgmt_status==\"METHYLATED\"), data = glio_clin_dat)\nM <- ncol(X)\nif (\"(Intercept)\" %in% colnames(X))\n  X <- array(X[,-1], dim = c(nrow(glio_clin_dat), M - 1))\n\npp_newdata <- \n  purrr::pmap(list(pp_beta, pp_alpha, pp_mu),\n              function(pp_beta, pp_alpha, pp_mu) {weibull_sim_data(alpha = pp_alpha,\n                                                                   mu = pp_mu,\n                                                              n = n_distinct(glio_clin_dat$sample_id),\n                                                                   beta = pp_beta,\n                                                                   X = X)\n              } )\n\n###### Plot time to event in the posterior draws compare to actual time in dataset\nggplot(pp_newdata %>%\n         bind_rows() %>%\n         mutate(type = 'posterior predicted values') %>%\n         bind_rows(glio_clin_dat %>% mutate(type = 'actual data'))\n       , aes(x = os_months, group = os_status, colour = os_status, fill = os_status))+ geom_density(alpha = 0.5) + facet_wrap(~type, ncol = 1)\n\n#### summarise posterior predictive draws\n\n## cumulative survival rate at each draw from the posterior\n\npp_survdata <- \n  pp_newdata %>%\n  map(~ mutate(., os_deceased = os_status == 'DECEASED')) %>%\n  map(~ survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%\n  map(fortify)\n\n## summarise cum survival for each unit time (month), summarised at 95% confidence interval\npp_survdata_agg <- \n  pp_survdata %>%\n  map(~mutate(., time_group = floor(time))) %>%\n  bind_rows() %>%\n  group_by(time_group) %>%\n  summarize(surv_mean = mean(surv),\n            surv_p50 = median(surv),\n            surv_lower = quantile(surv, probs = 0.025),\n            surv_upper = quantile(surv, probs = 0.975)) %>%\n  ungroup()\n\n## km\nkmcurve_data <-   fortify(\n  survfit(\n    Surv(os_months, os_deceased) ~ 1,\n    data = glio_clin_dat %>%\n      mutate(os_deceased = os_status == 'DECEASED')\n  )) %>%\n  mutate(lower =  surv,\n         upper = surv)\n\nggplot(pp_survdata_agg %>%\n         mutate(type = 'posterior predicted values') %>%\n         rename(surv = surv_p50, lower = surv_lower, upper = surv_upper, time = time_group)\n       %>%\n         bind_rows(kmcurve_data %>% mutate(type = 'actual data')),\n       aes(x = time, group = type, linetype = type)) +\n  geom_line(aes(y = surv, colour = type)) + \n  geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2) +\n  xlim(c(0, 200))+\n  ggtitle(\"Glioblastome cohort\")\n\n\n\n\n\n############# Save as a function  ######################\n\npp_predict_surv <- function(pp_alpha, pp_mu, n, pp_beta, X, \n                            level = 0.9,\n                            plot = F, data = NULL,\n                            sim_data_fun = weibull_sim_data) {\n  pp_newdata <- \n    purrr::pmap(list(pp_beta, pp_alpha, pp_mu),\n                function(pp_beta, pp_alpha, pp_mu) {sim_data_fun(alpha = pp_alpha,\n                                                                     mu = pp_mu,\n                                                                     n = n,\n                                                                     beta = pp_beta,\n                                                                     X = X)\n                } )\n  \n  pp_survdata <-\n    pp_newdata %>%\n    purrr::map(~ dplyr::mutate(., os_deceased = os_status == 'DECEASED')) %>%\n    purrr::map(~ survival::survfit(Surv(os_months, os_deceased) ~ 1, data = .)) %>%\n    purrr::map(fortify)\n  \n  ## compute quantiles given level \n  lower_p <- 0 + ((1 - level)/2)\n  upper_p <- 1 - ((1 - level)/2)\n  \n  pp_survdata_agg <- \n    pp_survdata %>%\n    purrr::map(~ dplyr::mutate(.,\n                               time_group = floor(time))) %>%\n    dplyr::bind_rows() %>%\n    dplyr::group_by(time_group) %>%\n    dplyr::summarize(surv_mean = mean(surv)\n                     , surv_p50 = median(surv)\n                     , surv_lower = quantile(surv,\n                                             probs = lower_p)\n                     , surv_upper = quantile(surv,\n                                             probs = upper_p)\n    ) %>%\n    dplyr::ungroup()\n  \n  if (plot == FALSE) {\n    return(pp_survdata_agg)\n  } \n  \n  ggplot_data <- pp_survdata_agg %>%\n    dplyr::mutate(type = 'posterior predicted values') %>%\n    dplyr::rename(surv = surv_p50,\n                  lower = surv_lower,\n                  upper = surv_upper, time = time_group)\n  \n  if (!is.null(data)){\n    ggplot_data <- \n      ggplot_data %>% \n      bind_rows(\n        fortify(\n          survival::survfit(\n            Surv(os_months, os_deceased) ~ 1, \n            data = data %>% \n              dplyr::mutate(\n                os_deceased = os_status == 'DECEASED')\n          )) %>%\n          dplyr::mutate(lower = surv,\n                        upper = surv, type = 'actual data')\n      )}\n  \n  pl <- ggplot(ggplot_data,\n               aes(x = time, group = type, linetype = type)) + \n    geom_line(aes(y = surv, colour = type)) +\n    geom_ribbon(aes(ymin = lower, ymax = upper), alpha = 0.2)\n  \n  pl \n}\n\n\n\n################# Posterior predictive check ###################\n\n\npp_alpha <- rstan::extract(wei_fullfit,'alpha')$alpha\npp_mu <- rstan::extract(wei_fullfit,'mu')$mu\npp_beta <- rstan::extract(wei_fullfit, 'beta_bg')$beta_bg\n\npp_beta <-  split(pp_beta, seq(nrow(pp_beta)))\npp_alpha <-  split(pp_alpha, seq(nrow(pp_alpha)))\npp_mu <-  split(pp_mu, seq(nrow(pp_mu)))\n\nX <- model.matrix(~ age_centered + \n                    I(g.cimp_methylation==\"G-CIMP\")+ \n                    I(mgmt_status==\"METHYLATED\"), data = glio_clin_dat)\nM <- ncol(X)\nif (\"(Intercept)\" %in% colnames(X))\n  X <- array(X[,-1], dim = c(nrow(glio_clin_dat), M - 1))\n\npl <- pp_predict_surv(pp_alpha = pp_alpha,\n                      pp_mu = pp_mu,\n                      pp_beta = pp_beta,\n                      X = X, \n                      n = nrow(glio_clin_dat),\n                      data = glio_clin_dat,\n                      plot = T\n) \npl + \n  xlim(NA, 250) +\n  ggtitle('Posterior predictive checks for NULL weibull model\\nfit to GBC 2008 historical cohort; showing 90% CI')\n",
    "created" : 1518709683693.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1640299393",
    "id" : "D95A6340",
    "lastKnownWriteTime" : 1518805399,
    "last_content_update" : 1518805399420,
    "path" : "C:/RFactory/Code_BYM_Warwick/Weibull_clinical.R",
    "project_path" : "Weibull_clinical.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}